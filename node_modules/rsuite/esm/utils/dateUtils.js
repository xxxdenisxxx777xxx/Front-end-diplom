'use client';
import pick from 'lodash/pick';
import omitBy from 'lodash/omitBy';
import getHours from 'date-fns/getHours';
import setHours from 'date-fns/setHours';
import getDay from 'date-fns/getDay';
import getMinutes from 'date-fns/getMinutes';
import getSeconds from 'date-fns/getSeconds';
import addDays from 'date-fns/addDays';
import set from 'date-fns/set';
import isValid from 'date-fns/isValid';
export { default as addDays } from 'date-fns/addDays';
export { default as addMonths } from 'date-fns/addMonths';
export { default as addYears } from 'date-fns/addYears';
export { default as addSeconds } from 'date-fns/addSeconds';
export { default as addMinutes } from 'date-fns/addMinutes';
export { default as addHours } from 'date-fns/addHours';
export { default as compareAsc } from 'date-fns/compareAsc';
export { default as endOfDay } from 'date-fns/endOfDay';
export { default as endOfISOWeek } from 'date-fns/endOfISOWeek';
export { default as endOfMonth } from 'date-fns/endOfMonth';
export { default as endOfWeek } from 'date-fns/endOfWeek';
export { default as format } from 'date-fns/format';
export { default as getDate } from 'date-fns/getDate';
export { default as getDay } from 'date-fns/getDay';
export { default as getDaysInMonth } from 'date-fns/getDaysInMonth';
export { default as getHours } from 'date-fns/getHours';
export { default as getMinutes } from 'date-fns/getMinutes';
export { default as getMonth } from 'date-fns/getMonth';
export { default as getSeconds } from 'date-fns/getSeconds';
export { default as getYear } from 'date-fns/getYear';
export { default as isAfter } from 'date-fns/isAfter';
export { default as isBefore } from 'date-fns/isBefore';
export { default as isEqual } from 'date-fns/isEqual';
export { default as isSameDay } from 'date-fns/isSameDay';
export { default as isSameMonth } from 'date-fns/isSameMonth';
export { default as isSameSecond } from 'date-fns/isSameSecond';
export { default as parse } from 'date-fns/parse';
export { default as parseISO } from 'date-fns/parseISO';
export { default as setDate } from 'date-fns/setDate';
export { default as setHours } from 'date-fns/setHours';
export { default as setMinutes } from 'date-fns/setMinutes';
export { default as setMonth } from 'date-fns/setMonth';
export { default as setSeconds } from 'date-fns/setSeconds';
export { default as setYear } from 'date-fns/setYear';
export { default as startOfDay } from 'date-fns/startOfDay';
export { default as startOfISOWeek } from 'date-fns/startOfISOWeek';
export { default as startOfMonth } from 'date-fns/startOfMonth';
export { default as startOfWeek } from 'date-fns/startOfWeek';
export { default as subDays } from 'date-fns/subDays';
export { default as isMatch } from 'date-fns/isMatch';
export { default as isValid } from 'date-fns/isValid';
export { default as set } from 'date-fns/set';
export { default as differenceInCalendarMonths } from 'date-fns/differenceInCalendarMonths';
export { default as isLastDayOfMonth } from 'date-fns/isLastDayOfMonth';
export { default as lastDayOfMonth } from 'date-fns/lastDayOfMonth';
var TimeProp;
(function (TimeProp) {
  TimeProp["DisabledHours"] = "disabledHours";
  TimeProp["DisabledMinutes"] = "disabledMinutes";
  TimeProp["DisabledSeconds"] = "disabledSeconds";
  TimeProp["ShouldDisableHour"] = "shouldDisableHour";
  TimeProp["ShouldDisableMinute"] = "shouldDisableMinute";
  TimeProp["ShouldDisableSecond"] = "shouldDisableSecond";
  TimeProp["HideHours"] = "hideHours";
  TimeProp["HideMinutes"] = "hideMinutes";
  TimeProp["HideSeconds"] = "hideSeconds";
})(TimeProp || (TimeProp = {}));
export var calendarOnlyProps = [TimeProp.DisabledHours, TimeProp.DisabledMinutes, TimeProp.DisabledSeconds, TimeProp.HideHours, TimeProp.HideMinutes, TimeProp.HideSeconds];
var HOURS_PATTERN = /(Hours?)/;
var MINUTES_PATTERN = /(Minutes?)/;
var SECONDS_PATTERN = /(Seconds?)/;
/**
 * Verify that the time is valid.
 *
 * @param props - The calendar props.
 * @param date - The date to check.
 * @returns Whether the time is disabled.
 */
export function disableTime(props, date) {
  if (!date) {
    return false;
  }
  var disabledTimeProps = [TimeProp.DisabledHours, TimeProp.DisabledMinutes, TimeProp.DisabledSeconds, TimeProp.ShouldDisableHour, TimeProp.ShouldDisableMinute, TimeProp.ShouldDisableSecond];
  var calendarProps = pick(props, disabledTimeProps);
  var mapProps = new Map(Object.entries(calendarProps));
  return Array.from(mapProps.keys()).some(function (key) {
    if (HOURS_PATTERN.test(key)) {
      var _mapProps$get;
      return (_mapProps$get = mapProps.get(key)) === null || _mapProps$get === void 0 ? void 0 : _mapProps$get(getHours(date), date);
    }
    if (MINUTES_PATTERN.test(key)) {
      var _mapProps$get2;
      return (_mapProps$get2 = mapProps.get(key)) === null || _mapProps$get2 === void 0 ? void 0 : _mapProps$get2(getMinutes(date), date);
    }
    if (SECONDS_PATTERN.test(key)) {
      var _mapProps$get3;
      return (_mapProps$get3 = mapProps.get(key)) === null || _mapProps$get3 === void 0 ? void 0 : _mapProps$get3(getSeconds(date), date);
    }
    return false;
  });
}

/**
 * Omit the calendar-only props from an object.
 *
 * @param props - The object to omit props from.
 * @returns The object with calendar-only props omitted.
 */
export var omitHideDisabledProps = function omitHideDisabledProps(props) {
  return omitBy(props, function (_val, key) {
    return key.startsWith('disabled') || key.startsWith('hide') || key.startsWith('shouldDisable');
  });
};

/**
 * Check if the time should be rendered based on the format.
 *
 * @param format - The format string.
 * @returns Whether the time should be rendered.
 */
export var shouldRenderTime = function shouldRenderTime(format) {
  return /([Hhms])/.test(format);
};

/**
 * Check if the month should be rendered based on the format.
 *
 * @param format - The format string.
 * @returns Whether the month should be rendered.
 */
export var shouldRenderMonth = function shouldRenderMonth(format) {
  return /[Yy]/.test(format) && /[ML]/.test(format);
};

/**
 * Check if the date should be rendered based on the format.
 *
 * @param format - The format string.
 * @returns Whether the date should be rendered.
 */
export var shouldRenderDate = function shouldRenderDate(format) {
  return /[Yy]/.test(format) && /[ML]/.test(format) && /[Dd]/.test(format);
};

/**
 * Check if only the time should be rendered based on the format.
 *
 * @param format - The format string.
 * @returns Whether only the time should be rendered.
 */
export var shouldOnlyRenderTime = function shouldOnlyRenderTime(format) {
  return /([Hhms])/.test(format) && !/([YyMDd])/.test(format);
};

/**
 * Get all weeks of a month.
 *
 * @param monthDate - The date of the month.
 * @param isoWeek - Whether to use ISO week numbering.
 * @returns An array of weeks in the month.
 */
export function getMonthView(monthDate, isoWeek) {
  var firstDayOfMonth = getDay(monthDate);
  var distance = 0 - firstDayOfMonth;
  if (isoWeek) {
    distance = 1 - firstDayOfMonth;
    if (firstDayOfMonth === 0) {
      distance = -6;
    }
  }
  var firstWeekendDate = addDays(monthDate, distance);
  var weeks = [firstWeekendDate];
  var nextWeekendDate = addDays(firstWeekendDate, 7);
  weeks.push(nextWeekendDate);
  while (weeks.length < 6) {
    nextWeekendDate = addDays(nextWeekendDate, 7);
    weeks.push(nextWeekendDate);
  }
  return weeks;
}

/**
 * Copy the time from one date to another.
 *
 * @param from - The source date.
 * @param to - The target date.
 * @returns The target date with the time copied from the source date.
 */
export function copyTime(_ref) {
  var from = _ref.from,
    to = _ref.to;
  if (!isValid(from) || !isValid(to)) {
    return to;
  }
  return set(to, {
    hours: getHours(from),
    minutes: getMinutes(from),
    seconds: getSeconds(from)
  });
}

/**
 * Swap two dates without swapping the time.
 *
 * @param dateRange - The date range to reverse.
 * @returns The reversed date range.
 */
export function reverseDateRangeOmitTime(dateRange) {
  var start = dateRange[0],
    end = dateRange[1];
  if (start && end) {
    return [copyTime({
      from: start,
      to: end
    }), copyTime({
      from: end,
      to: start
    })];
  }
  return dateRange;
}

/**
 * Get the time with AM and PM reversed.
 *
 * @param date - The date to reverse the time meridian.
 * @returns The date with the time meridian reversed.
 */
export var getReversedTimeMeridian = function getReversedTimeMeridian(date) {
  var clonedDate = new Date(date.valueOf());
  var hours = getHours(clonedDate);
  var nextHours = hours >= 12 ? hours - 12 : hours + 12;
  return setHours(clonedDate, nextHours);
};