export { default as addDays } from 'date-fns/addDays';
export { default as addMonths } from 'date-fns/addMonths';
export { default as addYears } from 'date-fns/addYears';
export { default as addSeconds } from 'date-fns/addSeconds';
export { default as addMinutes } from 'date-fns/addMinutes';
export { default as addHours } from 'date-fns/addHours';
export { default as compareAsc } from 'date-fns/compareAsc';
export { default as endOfDay } from 'date-fns/endOfDay';
export { default as endOfISOWeek } from 'date-fns/endOfISOWeek';
export { default as endOfMonth } from 'date-fns/endOfMonth';
export { default as endOfWeek } from 'date-fns/endOfWeek';
export { default as format } from 'date-fns/format';
export { default as getDate } from 'date-fns/getDate';
export { default as getDay } from 'date-fns/getDay';
export { default as getDaysInMonth } from 'date-fns/getDaysInMonth';
export { default as getHours } from 'date-fns/getHours';
export { default as getMinutes } from 'date-fns/getMinutes';
export { default as getMonth } from 'date-fns/getMonth';
export { default as getSeconds } from 'date-fns/getSeconds';
export { default as getYear } from 'date-fns/getYear';
export { default as isAfter } from 'date-fns/isAfter';
export { default as isBefore } from 'date-fns/isBefore';
export { default as isEqual } from 'date-fns/isEqual';
export { default as isSameDay } from 'date-fns/isSameDay';
export { default as isSameMonth } from 'date-fns/isSameMonth';
export { default as isSameSecond } from 'date-fns/isSameSecond';
export { default as parse } from 'date-fns/parse';
export { default as parseISO } from 'date-fns/parseISO';
export { default as setDate } from 'date-fns/setDate';
export { default as setHours } from 'date-fns/setHours';
export { default as setMinutes } from 'date-fns/setMinutes';
export { default as setMonth } from 'date-fns/setMonth';
export { default as setSeconds } from 'date-fns/setSeconds';
export { default as setYear } from 'date-fns/setYear';
export { default as startOfDay } from 'date-fns/startOfDay';
export { default as startOfISOWeek } from 'date-fns/startOfISOWeek';
export { default as startOfMonth } from 'date-fns/startOfMonth';
export { default as startOfWeek } from 'date-fns/startOfWeek';
export { default as subDays } from 'date-fns/subDays';
export { default as isMatch } from 'date-fns/isMatch';
export { default as isValid } from 'date-fns/isValid';
export { default as set } from 'date-fns/set';
export { default as differenceInCalendarMonths } from 'date-fns/differenceInCalendarMonths';
export { default as isLastDayOfMonth } from 'date-fns/isLastDayOfMonth';
export { default as lastDayOfMonth } from 'date-fns/lastDayOfMonth';
declare enum TimeProp {
    DisabledHours = "disabledHours",
    DisabledMinutes = "disabledMinutes",
    DisabledSeconds = "disabledSeconds",
    ShouldDisableHour = "shouldDisableHour",
    ShouldDisableMinute = "shouldDisableMinute",
    ShouldDisableSecond = "shouldDisableSecond",
    HideHours = "hideHours",
    HideMinutes = "hideMinutes",
    HideSeconds = "hideSeconds"
}
export declare type CalendarOnlyPropsType = TimeProp;
export declare const calendarOnlyProps: readonly [TimeProp.DisabledHours, TimeProp.DisabledMinutes, TimeProp.DisabledSeconds, TimeProp.HideHours, TimeProp.HideMinutes, TimeProp.HideSeconds];
interface CalendarProps {
    [TimeProp.DisabledHours]?: (hours: number, date: Date) => boolean;
    [TimeProp.DisabledMinutes]?: (minutes: number, date: Date) => boolean;
    [TimeProp.DisabledSeconds]?: (seconds: number, date: Date) => boolean;
    [TimeProp.HideHours]?: (hours: number, date: Date) => boolean;
    [TimeProp.HideMinutes]?: (minutes: number, date: Date) => boolean;
    [TimeProp.HideSeconds]?: (seconds: number, date: Date) => boolean;
}
/**
 * Verify that the time is valid.
 *
 * @param props - The calendar props.
 * @param date - The date to check.
 * @returns Whether the time is disabled.
 */
export declare function disableTime(props: CalendarProps, date: Date): boolean;
/**
 * Omit the calendar-only props from an object.
 *
 * @param props - The object to omit props from.
 * @returns The object with calendar-only props omitted.
 */
export declare const omitHideDisabledProps: <T extends Record<string, any>>(props: T) => Partial<Omit<T, TimeProp>>;
/**
 * Check if the time should be rendered based on the format.
 *
 * @param format - The format string.
 * @returns Whether the time should be rendered.
 */
export declare const shouldRenderTime: (format: string) => boolean;
/**
 * Check if the month should be rendered based on the format.
 *
 * @param format - The format string.
 * @returns Whether the month should be rendered.
 */
export declare const shouldRenderMonth: (format: string) => boolean;
/**
 * Check if the date should be rendered based on the format.
 *
 * @param format - The format string.
 * @returns Whether the date should be rendered.
 */
export declare const shouldRenderDate: (format: string) => boolean;
/**
 * Check if only the time should be rendered based on the format.
 *
 * @param format - The format string.
 * @returns Whether only the time should be rendered.
 */
export declare const shouldOnlyRenderTime: (format: string) => boolean;
/**
 * Get all weeks of a month.
 *
 * @param monthDate - The date of the month.
 * @param isoWeek - Whether to use ISO week numbering.
 * @returns An array of weeks in the month.
 */
export declare function getMonthView(monthDate: Date, isoWeek: boolean): Date[];
/**
 * Copy the time from one date to another.
 *
 * @param from - The source date.
 * @param to - The target date.
 * @returns The target date with the time copied from the source date.
 */
export declare function copyTime({ from, to }: {
    from: Date;
    to: Date;
}): Date;
/**
 * Swap two dates without swapping the time.
 *
 * @param dateRange - The date range to reverse.
 * @returns The reversed date range.
 */
export declare function reverseDateRangeOmitTime(dateRange: [Date, Date]): [Date, Date];
/**
 * Get the time with AM and PM reversed.
 *
 * @param date - The date to reverse the time meridian.
 * @returns The date with the time meridian reversed.
 */
export declare const getReversedTimeMeridian: (date: Date) => Date;
