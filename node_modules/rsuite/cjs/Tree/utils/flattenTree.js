'use client';
"use strict";

exports.__esModule = true;
exports.flattenTree = flattenTree;
exports.walkTreeBfs = walkTreeBfs;
exports.walkTreeDfs = walkTreeDfs;
exports.UNSAFE_flattenTree = UNSAFE_flattenTree;
exports.WalkTreeStrategy = void 0;
var _attachParent = require("../../utils/attachParent");
function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
/**
 * Strategy for walking the tree.
 */
var WalkTreeStrategy;
/**
 * Flattens a tree structure into an array.
 */
exports.WalkTreeStrategy = WalkTreeStrategy;
(function (WalkTreeStrategy) {
  WalkTreeStrategy[WalkTreeStrategy["DFS"] = 0] = "DFS";
  WalkTreeStrategy[WalkTreeStrategy["BFS"] = 1] = "BFS";
})(WalkTreeStrategy || (exports.WalkTreeStrategy = WalkTreeStrategy = {}));
function flattenTree(rootNodes, getChildren, walkStrategy) {
  if (walkStrategy === void 0) {
    walkStrategy = WalkTreeStrategy.BFS;
  }
  var result = [];
  if (walkStrategy === WalkTreeStrategy.BFS) {
    walkTreeBfs(rootNodes, getChildren, function (node) {
      return result.push(node);
    });
  } else if (walkStrategy === WalkTreeStrategy.DFS) {
    walkTreeDfs(rootNodes, getChildren, function (node) {
      return result.push(node);
    });
  }
  return result;
}

/**
 * Walks the tree in a breadth-first search (BFS) manner.
 */
function walkTreeBfs(rootNodes, getChildren, callback) {
  for (var queue = [].concat(rootNodes); queue.length > 0;) {
    var _node = queue.shift();
    callback(_node);
    var children = getChildren(_node);
    if (children) {
      queue.push.apply(queue, children);
    }
  }
}

/**
 * Walks the tree in a depth-first search (DFS) manner.
 */
function walkTreeDfs(rootNodes, getChildren, callback) {
  for (var _iterator = _createForOfIteratorHelperLoose(rootNodes), _step; !(_step = _iterator()).done;) {
    var _node2 = _step.value;
    callback(_node2);
    var children = getChildren(_node2);
    if (children) {
      walkTreeDfs(children, getChildren, callback);
    }
  }
}

/**
 * Flattens a tree structure to an array (deprecated).
 * @deprecated This function is considered unsafe because it mutates the `tree` argument in-place.
 *             Use the `flattenTree` function instead.
 */
function UNSAFE_flattenTree(tree, childrenKey, executor) {
  if (childrenKey === void 0) {
    childrenKey = 'children';
  }
  var flattenData = [];
  var traverse = function traverse(data, parent) {
    if (!Array.isArray(data)) {
      return;
    }
    data.forEach(function (item, index) {
      var node = typeof executor === 'function' ? executor(item, index) : item;
      flattenData.push((0, _attachParent.attachParent)(node, parent));
      if (item[childrenKey]) {
        traverse(item[childrenKey], item);
      }
    });
  };
  traverse(tree, null);
  return flattenData;
}