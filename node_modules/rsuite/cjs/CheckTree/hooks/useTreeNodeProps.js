'use client';
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");
exports.__esModule = true;
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _utils = require("../utils");
var _TreeProvider = require("../../Tree/TreeProvider");
var _Highlight = _interopRequireDefault(require("../../Highlight"));
function useTreeNodeProps(props) {
  var _useItemDataKeys = (0, _TreeProvider.useItemDataKeys)(),
    valueKey = _useItemDataKeys.valueKey,
    labelKey = _useItemDataKeys.labelKey;
  var uncheckableItemValues = props.uncheckableItemValues,
    disabledItemValues = props.disabledItemValues,
    loadingNodeValues = props.loadingNodeValues,
    focusItemValue = props.focusItemValue,
    flattenedNodes = props.flattenedNodes,
    keyword = props.keyword;
  return (0, _react.useCallback)(function (nodeData) {
    var visible = nodeData.visible,
      checkState = nodeData.checkState;
    var value = nodeData[valueKey];
    var nodeLabel = nodeData[labelKey];
    var allUncheckable = (0, _utils.isAllSiblingNodeUncheckable)(nodeData, flattenedNodes, uncheckableItemValues, valueKey);
    var label = keyword ? /*#__PURE__*/_react.default.createElement(_Highlight.default, {
      as: "span",
      query: keyword
    }, nodeLabel) : nodeLabel;
    var disabled = (0, _utils.getDisabledState)(flattenedNodes, nodeData, {
      disabledItemValues: disabledItemValues,
      valueKey: valueKey
    });
    var uncheckable = (0, _utils.isNodeUncheckable)(nodeData, {
      uncheckableItemValues: uncheckableItemValues,
      valueKey: valueKey
    });
    var loading = loadingNodeValues.some(function (item) {
      return item === nodeData[valueKey];
    });
    var focus = focusItemValue === value;
    return {
      value: value,
      label: label,
      visible: visible,
      loading: loading,
      disabled: disabled,
      nodeData: nodeData,
      checkState: checkState,
      uncheckable: uncheckable,
      allUncheckable: allUncheckable,
      focus: focus
    };
  }, [valueKey, flattenedNodes, uncheckableItemValues, keyword, labelKey, disabledItemValues, loadingNodeValues, focusItemValue]);
}
var _default = useTreeNodeProps;
exports.default = _default;